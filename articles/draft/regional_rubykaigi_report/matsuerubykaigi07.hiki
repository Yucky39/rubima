! RegionalRubyKaigi レポート 松江 Ruby 会議 07

!! はじめに

2015年9月26日（土）に松江Ruby会議07が開催されました。今年のテーマはTODOでした。66名の方々に参加いただきました。また、Youtubeの合計視聴数は161名（2015年9月28日現在）でした。

* 日時：2015年9月26日（土）11:00〜17:10（懇親会: 18:00〜）
* 場所：松江オープンソースラボ
* 主催：Matsue.rb（まつえるびー）
* 後援：日本Rubyの会
* 動画による中継(Youtube)：https://www.youtube.com/playlist?list=PLbJxhePIoIPBSYjO2enmqSTpucHuHiA9S
* Togetterまとめ：http://togetter.com/li/895041
* 公式タグ・Twitter：[[#matrk07|https://twitter.com/hashtag/matrk07]]

!! Redmineの歴史とアーキテクチャ (ゲスト講演)

* 発表者
** Toshi MARUYAMA 氏([[@marutosijp|https://twitter.com/marutosijp]])

[[発表の様子|matsuerubykaigi07/02_guest.jpg]]

RedmineコミッタのToshi MARUYAMA氏に「Redmineの歴史とアーキテクチャ」と題してご講演いただきました。
氏はMercurial overhaulとその他SCM周りのチケットにテスト付きのパッチを送っていたら2010-12に誘われてコミッタになったということでした。

Redmineの公開から現在に至るまでの歴史について次のようにうかがいました。

* 2006-06-25 0.1.0 公開
* 2010-05-01 0.9.4 ここまでJean-Philippe Lang（以下JPL）がタグを打っていた。
* 2010-06-24 0.9.5 ここからEric Davisがタグ打ち。
* 2010-10-31 1.0.3 ここまでEric Davisがタグ打ち。
* 2010-11-27 Eric DavisがRedmineやめると発表してRedmineからChiliProjectがforkした。
* 2010-11-28 1.0.4 ここからJPLがタグ打ち。
* 2012-04-14 1.4.0 Bundler対応 routeの厳格化
* 2012-05-15 2.0.0 Rails 3.2.3対応
* 2012-09-16 2.1.0 jQuery化
* 2014-10-22 リビジョン13482 Rails 4.1.6対応
** この時点でJPLから「Rails 4.2がもうすぐリリースされる。Rails 5がリリースされると4.1はセキュリティフィックスが入らなくなるため、Redmine 3.xは4.2を目指さないといけない。」とコメントがあった。
* 2015-02-19 3.0.0 Rails 4.2.0対応

Redmineからforkしたプロジェクトについては次のように言及されました。

* ChiliProject
** Redmineからfork
** 2013年はコピーライトの年数の変更ぐらいしかコミットがなかった。
** 2015-02-02に終了した。色々な理由はあるだろうが、最大の理由はRails3への移行に失敗したためと考えられる。
* OpenProject
** ChiliProjectからfork
** ChiliProjectが企業にコントロールされることとお金ベースでコントロールされるのはどうかといった意見の違いから。
** 時間の都合で詳しいご説明はありませんでしたが、こちらは開発が続いているようです。

Rails3へ移行では主に次の作業を行ったということでした。

* 1.3以前はRedmineで利用しているライブラリの大部分をRedmineのリポジトリで管理していたが、Bundler対応にあたっていくつか削除してBundlerに任せるようにした。
** 対応初期時点まだかなりの数の外部由来ライブラリがリポジトリにあった。
* テストツールのobject_daddyをforkしたedavis10-object_daddyは削除した。
* Asset Pipelineをプラグインに適用するにはどうすれば良いか結論が出なくて未対応とした。

Rails 4.1と4.2でも内部の構造が変わっていてgemが対応や依存関係で苦労したということでした。
主に次の作業を行ったということでした。

* 最も大変だったのはAwesome Nested Set（以下ans）の置換えで、元のソースコードと同梱していたソースコードに乖離していて、最終的に使うのをやめてシンプルな独自実装を行ったということでした。
** ツリーが破壊されるバグをRedmineが独自に回避していた。
** ansの2.1.xのマイナーバージョン間で挙動が変化していた。Redmine上では徹底したテストがあって判明した。
** ansがstableブランチでリファクタリングしていてRedmine独自の回避が適用できない。
** ans 3.0.xでは1つのリビジョンで挙動が全く変わってしまって、しかもテストがない。
* Shouldaは削除した。
** 似たような名前のgemが複数存在していた。
** Rails 4.2対応状況が不可解だった。
* 他に次のようなことがあったということでした。
** MySQL5.5と5.6で行ロックとデッドロックの仕組みが変わっていた。MySQLからMariaDBがフォークしていてどちらにレポートすれば良いのかよくわからなかった。
** Rails本体のSQLite3周りに不具合が見つかったので修正してRailsにPRを取り込んでもらった。

Redmine 3.0.0でRails 4.2.0対応したことに関連して、Rails 4.2.0はMingGW(Windows)環境とJRubyでは動作しない点について次のように言及されました。

* MingGW
** ASCIIの文字セット以外の文字を含むURLに不具合があって、Railsにpull requestを送って解決した。
* Railsが依存するNokogiriが動かない。
* JRuby
** activerecord-jdbc-adapterが対応していない。ただし、今朝見たらissueがクローズされていたのでもしかしたら改善できたかも。
** Railsが依存するNokogiriが動かない。

RedmineがRails 5に対応するための課題として、strong parameterへの対応を挙げられました。Rails 4対応時にprogrected_attributes.gemを使って見送ったが、Rails 5にはこのgemが対応しないために必要ということでした。

「ChiliProjectが終了するぐらいには大変だった」と言われるほどの追従作業について、質疑応答では会場から「他のフレームワークを使う予定はないか」といったご質問がありましたが、「これからもRailsを使う」とお話がありました。

大きなプロジェクトが長期に渡ってメンテナンスし続けることの大変さが理解できるご講演でした。

!! 昼休憩 (LT)

お昼ごはんを食べながら、山口友洋氏(TODO)の司会で以下の5件のLTの発表が行われました。

* WWDCに行ってきた話
** 発表者
*** 木村友哉氏([[@tomo-k|https://github.com/tomo-k]])
* 島根大学ものづくり部Pimの紹介
** 発表者
*** 佐藤公治氏(TODO)
** 資料
*** TODO
* MidiosX を作りました
** 発表者
*** 進藤元明氏([[@motoakira|https://twitter.com/motoakira]])
** 資料
*** http://www.slideshare.net/motoakira/midiosx
* 明日のために今日できること（仮
** 発表者
*** きむらしのぶ氏([[@mix_dvd|https://twitter.com/mix_dvd]])
* 都会と田舎のライフスタイルGAP
** 発表者
*** 小嵜英治氏([[@eijik|https://github.com/eijik]])

[[発表の様子|matsuerubykaigi07/03_lt01.jpg]]
[[発表の様子|matsuerubykaigi07/03_lt02.jpg]]
[[発表の様子|matsuerubykaigi07/03_lt03.jpg]]
[[発表の様子|matsuerubykaigi07/03_lt04.jpg]]
[[発表の様子|matsuerubykaigi07/03_lt05.jpg]]

!! Rubyにみるプログラミングの進化 (基調講演)

* 発表者
** まつもとゆきひろ氏([[@yukihiro_matz|https://twitter.com/yukihiro_matz]])

[[発表の様子|matsuerubykaigi07/04_keynote.jpg]]

我らが松江名誉市民！ということで、今年もまつもとさんにご講演いただきました。いつもありがとうございます。

今回は「Rubyにみるプログラミングの進化」というタイトルでご講演いただきました。
前半はまつもとさんがプログラミングを学んでいった経緯とRuby開発当時の時代背景について、後半はまつもとさんの開発環境や開発手法についてお話いただきました。
特に後半の話は、普段の講演ではあまり聞くことができない貴重なお話だったと思います。
また、発表スライドでは、まつもとさんの17歳や27歳当時の貴重なお写真を拝見できました。

中学時代にBASICからプログラミングを始めたそうですが、BASICをやっていた頃はローカル変数などは考えもしない状況だったそうです。
その後、Pascalの本を読んだ時に、ローカル変数、ユーザー定義関数、再帰、ユーザー定義データ構造といった概念を知って感銘を受けたと同時に、すべてのプログラミング言語は誰かの手によって意図を持って設計されているものだと気づき、自分も設計してみたいと思ったとのことでした。

大学時代には、コンパイラ関連の著作で有名な中田育男先生の研究室に所属したそうですが、言語研究の分野において、日本の大学では、新しい言語を設計するよりは既存の言語のより良い処理系を実装するといった研究が主流であったとのことです。

その後、社会人となってからRubyを開発することになるわけですが、Rubyを開発し始めた当時は以下の様な時代背景であったそうです。

* テキスト処理の仕事が多く、プログラムは小規模で、構造化の必要性はそれほど高くなかった。
* そのうち、規模の大きいものは手続き型からオブジェクト指向に移行していったが、スクリプティングにおいては一般的では無く、「Ruby is too good.」と言われたこともあった。
* Rubyを開発し始めた頃は自宅にPCが無く、PCを購入したのは何年か経ってから。PCを購入してからは、ソースコードを毎日tarballに固めて、データを持ち運んでいた。
* 当時のソースコードは1万行くらいで、バージョン管理についてはそれほどニーズはなかった。
* ユニットテストが一般的に広まったのはXPが知られてからで、Rubyを作り始めた時は知らなかった。バグを直したときに、その場限りのテストコードを作ってはいた。

まつもとさんの開発環境や開発手法については、以下の話題が挙がっていました。

* エディタ: Emacs。vim や atom なども試してみた事はあるが、Emacs は環境なので全てを移行するのは難しい。
* コンパイラ: 昔から GCC。Clangなどは本格的には使っていない。
* デバッガ: GDB を使っているが、それほど得意ではない(笑)。特にスレッドプログラミングでは、なんだかんだでprintデバッグが多い。
* バージョン管理: SCCS -> RCS -> CSV -> SVN -> Git。バックアップとしてのコミットから、リリース・レビュー単位としてのコミットへ。

また、Git から派生して、Github についても次のように言及されていました。

* DVCS + Issues + SNS
* プルリクエスト。昔はパッチのやりとりや権限の管理が大変だった。
* カジュアルなフォーク。昔はフォークするのは後ろめたいことという風潮があった。
* ソーシャルコーディングの一般化した。
* 企業のソフトウェア開発における、OSS方式へのスーパーハイウェイとなっている。

最後は、ユニットテストについての話題でした。
テスト嫌いを公言されているまつもとさんですが、その理由としては、プロダクトコードとテストコードの両方を書くのが DRY ではないと感じるからだそうです。
これについては、静的型付き言語における型宣言でも同じ感覚を持っておられるとのことでした。
テストに相当する部分はコンピュータが頑張って欲しいと思っておられるそうで、IDE のメソッド補完機能などがそれに近いイメージだとのことです。

それがさらに進むと、人間が話しかけただけでプログラミングができるような時代が来るかもしれないけど、そんな時代になっても、あるおじいさんは Linux のエミュレーションをお願いして Ruby を作り続けているんじゃないかな(笑)とのことでした。

実用面で人間自身がプログラミングをする必要がなくなると、プログラミングは伝統工芸のような扱いになっていくかもしれませんね。
ただ、そのような時代がきても、Ruby でプログラミングの楽しさを知った Rubyist たちは、娯楽としてのプログラミングを続けているような気がします。
Happy Hacking!

!! matsuerb.products(2014..2015)

* 発表者
** 橋本 将氏([[@sho_hashimoto|https://twitter.com/sho_hashimoto]])

[[発表の様子|matsuerubykaigi07/05_matsuerb.jpg]]

TODO

!! スプラウト.rb 〜2年目に突入!!!〜

* 発表者
** 松岡 香里 氏([[@kaorim8|https://twitter.com/kaorim8]])
* コーチ
** 佐田 明弘氏([[@sada4|https://twitter.com/sada4]])
** 倉橋 徹 氏([[@ToruKurahashi|https://github.com/ToruKurahashi]])
** 本多 展幸 氏([[@nobyuki|https://twitter.com/nobyuki]])

[[発表の様子|matsuerubykaigi07/06_sproutrb.jpg]]

松岡氏の発表でSprout.rbの活動についてご紹介いただきました。
前回の発表では参加者目線での紹介でしたが今回はコーチ目線でのお話をいただきました。
Sprout.rbは早くも１周年を迎えたそうで松岡氏は "コミュニティって続いていくの当たり前ではなくて本当に参加して頂いてるみなさんと支援している人のおかげだと思っている" と挨拶をしておられました。
前年度から参加しておられる佐田氏に加え今年度から倉橋氏、本多氏も加わり少しずつ成長していっているようです。
松岡氏のコミュニティのご紹介の後コーチ陣からも一言ずつコメントをいただいています。

* 佐田氏

これまでは子供に対して教える機会があったもののSprout.rbはどちらかというと年齢層が上だったので少し不安はあったそうです。
ただそこは大人！間違えても受入れてもらいありがたかったそうです。

* 倉橋氏

懇親会前の１回のみの参加ということでみなさんからネタにされ笑いが絶えない発表でした。
冗談を言う反面Railsを広めたいという熱い気持ちを語られておられRails愛を感じました。

* 本多氏

松江で行われたRailsGirlsの第１回からの継続学習ということでSprout.rbでは女性の比率が多いそうです。
仕事やプライベートで女性に教えることもあり女性率の多いSprout.rbを紹介すれば間違いがないそうです。

最後に松岡さんからSprout.rbの位置付けについておっしゃったことで既存コミュニティの最初のハードルが高いと思う人の第一歩として活動できたらよいとのことでした。
今回の発表を見てとても暖かい雰囲気のコミュニティなのがすごい伝わる発表でした。

!! プログラミングコンテスト 結果紹介

* 発表者
** 吉岡隆行氏([[@murateku|https://twitter.com/murateku]])、内部 高志氏([[@Takashi-U|https://github.com/Takashi-U]])、倉橋 徹氏([[@ToruKurahashi|https://github.com/ToruKurahashi]])、本多 展幸氏([[@nobyuki|https://twitter.com/nobyuki]])、橋本 将氏([[@sho_hashimoto|https://twitter.com/sho_hashimoto]])と受賞者の皆さん

[[発表の様子|matsuerubykaigi07/07_contest.jpg]]

松江Ruby会議07ではpaizaさんとの協賛で[[オンラインでのプログラミングコンテスト|https://paiza.jp/poh/joshibato/matsue-ruby]]が行われました。ゲームセンターあらし(アーケードゲーマーふぶき?)が元ネタに思えるキャラクターや島根県をイメージしたという巫女さんなどpaizaさんの本気ぶりまで含めて委員長の吉岡氏から説明があった後で以下の流れで解説が進みました。

# 問題の解説と模範解答の説明
# 松江Ruby会議07の参加者のみを対象にした1位から3位の発表
# 松江Ruby会議07の参加者のみを対象にした特別賞の発表
# 全体での9/26時点での1位から3位の発表と解説(※paizaさんのコンテスト自体は10/6まで行われました)

元々スタッフも参加できるルールではあったためか、2.では受賞者が全員スタッフになってしまうというハプニングがありました。松江Ruby会議07での受賞者のコードは以下のようなものでした。

本多氏(1位:116バイト)

<<<
gets;w=$<.read.split.sort;c=l="";w.each{|d|d==(r=d.reverse)?c+=d : d<r&&w.bsearch{|x|r<=>x}&&l+=d};$><<l+c+l.reverse
>>>

吉岡氏(2位:141バイト)

<<<
l="";gets;b=$<.map{|a|a.chop}.sort;loop{w=b.shift||break;l.insert l.size/2,b.include?(r=w.reverse)?w+b.delete_at(b.index r):w==r ?w:""};$><<l
>>>

西田氏(3位:142バイト)

<<<
gets;a=gets("").split.sort;b=[];c="";while w=a.shift;d=w.reverse;(i=a.index d)?(a.delete_at i;c<<w):w==d&&b<<w;end;puts c+b.min.to_s+c.reverse
>>>

3者とも入力を先に並べ替え(回答はアルファベット順で一番若いものが必要なため)、中心に来る文字列(asaのような自身が回文になっている文字列)を選び、不要なものを捨てるという所までは同じのようです。それ以後のいかにコードを短くするかでバイト数に違いが出ているのが面白いですね。詳細な解説は長くなってしまうため省略しますが、よかったらどう違うかはじっくり見てみてください。

また、1位となった本多氏にランキング全体の1位、3位の方の回答を解説していただきました。当日は残念ながら時間の関係で全体の2位の方の解説は省略されてしまいましたが、[[paiza開発日誌|http://paiza.hatenablog.com/entry/2015/10/27/【コードゴルフ】初心者でもわかるRubyショートコー]]に同様のMatsue.rb提供の解説を掲載されていますので、併せてご覧ください。

paizaオンラインハッカソンは次回開催予定もあるとの事ですので、もし興味のある方で参加に遅れたという方は是非参加してみてください。

!! 学校で使用しているシステムについての話 〜わんわんクラブお仕事おたすけシステム〜

* 発表者
** 藤井貴氏

[[発表の様子|matsuerubykaigi07/08_bijisen.jpg]]

松江総合ビジネスカレッジの学生である藤井貴氏に学校でおこなったシステムの更新作業についてご講演いただきました。
システムとは、学校でペットのトリミングの授業があり、その授業のモデルとして他の方が飼われているペットのわんちゃんをお預かりするため、その予約をするためのシステムとのことでした。
苦労した点を幾つかご紹介いただき、一例として更新作業のメンバは入れ替わりがあり、設計書やシステムで使用している独自のフレームワークを作成した初期メンバが既に卒業されてしまい、その引き継いだ設計書の不備の修正をあげていました。
会場はその独自のフレームワークが気になっていましたが、残念ながら学校内でのみ使用されているので公開されていないとのことでした。
そうした更新作業を通し、振り返ってみると以下のことを学習できたとのことでした。

* 設計書の大切さ
* 初期メンバーの大切さ
* プロジェクトリーダーの難しさ
* 犬についての知識

システムの更新作業は後輩の学生に引き継がれるため、システムの今後の改善点をあげ、後輩に期待しながら講演を終えられました。

!! スモウルビー

* 発表者
** 高尾宏治 氏([[@takaokouji|https://twitter.com/takaokouji]])
** 本多展幸 氏([[@nobyuki|https://twitter.com/nobyuki]])

[[発表の様子|matsuerubykaigi07/09_progshou.jpg]]

Rubyプログラミング少年団理事長、副理事長のお二人によるスモウルビーの新機能を紹介するためのライブコーディング(本多氏)及びその解説(高尾氏)でした。

ライブコーディングの前にまずは少年団がRubyを対象としたスポーツ少年団によるコンピュータの楽しみと、リテラシーを学ぶための場だという事と、道場など少年団の活動の時期の紹介がありました(興味がある方は http://smalruby.jp の右上から「体験」、「道場」等を参照してください)。

ライブコーディングでは[[0.4.0|https://github.com/smalruby/smalruby-editor/releases/tag/v0.4.0]]の新機能である以下の2つの機能の内、1.を使ったミニゲームを作成しました。

# キャラクターのコスチュームを次へ、次へと変える機能
# キャラクターの画像をあたらしく追加する機能

あと2分で時間がなくなってしまうが大丈夫かという場面もありましたが無事にツインb...某有名シューティングを連想するミニゲーム(自機がアイテムを攻撃する度に画像が切り替わるもの)を作りあげる事ができました。新機能の紹介に併せて、スモウルビーだけでそこそこ本格的なものが作れる事を紹介したかったとの事ですがマップの編集への道筋を示す事ができればより本格的に作る事ができそうです。作成したプログラムは[[こちら|https://github.com/nobyuki/matrk07]]で公開されています。

また、身近に高校生以下のプログラミングに興味がありそうな方がいらっしゃいましたら、[[本セッションの動画|https://www.youtube.com/watch?v=y-trBvQ0NLg]]と[[スモウルビー甲子園公式サイト|https://smalruby-koshien.jp]]のリンクをご紹介してみてはいかがでしょうか。2016/01/10まで応募を受け付けているとの事です。

!! Ruby Quiz

[[発表の様子|matsuerubykaigi07/10_rubyquiz.jpg]]

観客・スタッフ全員参加型の Ruby Quiz を開催しました。
Matsue.rb スタッフ考案の Ruby に関する択一問題が出題されました。
すべての問題が Ruby のコードに関する問題で、脳内コンパイラの性能と、いかに日頃から意識して Ruby を使っているかが問われました。

Q. 以下のコードを実行し、aとbを数値にして比較したとき、大きいのはa,bどちらでしょうか？

a = (1..9).reduce('') do |sum, value|
    sum.to_s + value.to_s
end

b = (1..9).reduce(0) do |sum, value|
    sum + value
end

制限時間1分という中で上記のような問題も出題され、日頃仕事や趣味で Ruby を使っているエンジニアでも苦戦していた様子でした。
最終的に勝ち残った方には、スポンサーの皆様より豪華景品が送られました。
2択とはいえすぐに答えを出すことが難しい問題が多く、プログラミング言語としての奥深さを改めて実感する良いきっかけになったのではないでしょうか。

! 著者について

!! 西田 雄也 ([[@nishidayuya|https://twitter.com/nishidayuya]])

プログラマ。
Redmineは職場ではもちろん、結婚式のタスク管理以降、家族でも使っている。
2014-12に [[redmine_text_format_converter|https://github.com/nishidayuya/redmine_text_format_converter]] というプラグインを開発し、Redmineの書式をTextileからMarkdownに変換して管理下の全てのプロジェクトをMarkdownへ移行させました。

!! 佐田 明弘 ([[@sada4|https://twitter.com/sada4]])

Matsue.rbにひっそりといるプログラマ。

!! 井上 裕之 ([[@ino_h|https://twitter.com/ino_h]])

Rubyといろんなものをまぜるが好き。

!! 本多 展幸 ([[@nobyuki|https://twitter.com/nobyuki]])

プログラミング教育おじさん

!! 木村 友哉([[@tomo-k|https://github.com/tomo-k]])

Apple 信者な Rubyist

!! 橋本 将 ([[@sho_hashimoto|https://twitter.com/sho_hashimoto]])

Matsue.rb の雑用係。[[定例会|http://matsue.rubyist.net/about_us/#matsuerb]]にはだいたい出席してます
