05_Railsアプリのセキュリティ対策入門
大垣さん

Rails4について
・Ruby2.0、Ruby1.9.3
・Turbolinks
・Russiaon Doll Caching
・Stong Paramators -> 大事！

ITセキュリティについて
セキュリティのCIA（３要素）
・気密性：許可したものだけアクセス出来るb
・可用性：
・完全性：

セキュリティ対策は完璧でないとならない！
セキュリティ対策 -> リスク管理 -> 適切な緩和策

構造とセキュリティ
信頼出来るのは自分で書いたコードだけ

プログラムの基本構造
入力 -> 処理 -> 出力
・入力：バリデーション
・処理：処理
・出力：エスケープ、ヘルパー、バリデーション
-> これでセキュリティの８、９割は解消出来る

入力バリデーション（１番目に重要）
・ベストプラクティス
-> 入力パラメータは入力処理としてバリデーションする
・バッドプラクティス
-> 入力パラメータを入力処理以外でバリデーションする
・ISO27000 / ISMSなども入力バリデーションを重要視している

出力バリデーション（２番目に重要）
・エスケープ -> ヘルパー -> バリデーション

入出力のコントロールをすることがとても大事。

Rails4によるセキュリティ関連で一番重要な変更は
Strong Paramater
・Rails4のバリデーションはModelではなくControllerで行う。
・処理に入る瞬間にバリデーションを行うので安全

古い手法を「Weak Paramater」と題して解説
・Rails3でもStrongParamatorを導入出来るのでGemから入れよう。

Modelのバリデーションは行うべきか？
・多重のセキュリティ・フェールセーフ・Modelでもバリデーションを行う方がより安全
ただしmStrongParamaterと全く同じバリデーションは意味が無い

JavaScriptインジェクション
・基本的なRailsの書き方をすれば安全
・侵入経路は様々なので非常に厄介

ブラウザは複数の出力先があることを把握する
-> 「HTML」「css」「JavaScript」「JSON」

回避方法
・学習とトレーニングしかない
-> 学んで対応するより他無い

SQLインジェクション
・ActiveRecordによってエスケープ
・sanitizeメソッドでエスケープ

CSRF
protect_from_forgeryについて、「rest_session」（Rails3）から
「exception」（Rails4）推奨になった。
-> 不正なアクションについてはエラーを出すべきとの考えから。

Session管理
・SSLを有効にすべき！
・Rails4で暗号化された
・Railsのセッション管理機構もセッション固定化に脆弱

ファイルアップロード／ダウンロード
・ファイル名に「../」を付けて他のディレクトリに保存されないようにすべき
・ブラックリスティングは簡単なものでも間違えやすい

セキュリティトークン
・ソースへの書き込みはNG

必ず参照すべき資料
・Railsセキュリティガイド（日本語版もある）
・OWASP TOP 10
・SANS/CWE TOP 25

Rails/Gemを信頼できるか？
・信頼するために検査することも要求
・Rails3までのバリデーション機構はベストプラクティスとはいえない

上級レベル開発者に必須
・「エスケープ処理」を知る
・「ヘルパー」の実装
・「バリデーション」
が大切。

ーーーーーーーーーーーーーーー